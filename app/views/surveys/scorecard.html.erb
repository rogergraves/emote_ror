<div id="content-win-centr-scorecard" role="main">
  <div class="survey-title">

  </div>
    <div id="scorecard-content">
		<%= javascript_include_tag 'http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js' %>
		<%= javascript_include_tag 'highcharts.js' %>
        <%= javascript_include_tag 'jquery.simplemodal.js' %>
        <link type='text/css' href='/stylesheets/modal.css' rel='stylesheet' media='screen' />

    <style type="text/css">
        .commentRow1 {
            height:45px;
            width: 1150px;
            background-color: #FFFFFF;
            font-size: 11px;
        }
        .commentRow2 {
            height:45px;
            width: 1150px;
            background-color: #f0f0f0;
            font-size: 11px;
        }
    </style>
		
<script type="text/javascript">

    var colors = {'green': '#689839', 'red': '#c93337', white: '#FFFFFF', grey: '#CCCCCC'};
	var intensity = {pp: 'enthusiasts', /*mp: 'participants', */mn: 'indifferent', pn:'detractors'};
	var pieColors = {pp: '#0db5d4', /*mp: '#cccccc', */mn: '#ececec', pn: '#eeae01'};
	<% results = @survey.result_obj %>
	var configTotals = <%= raw results[:totals].to_json -%>;
	var configBars = <%= raw results[:bars].to_json -%>;
	var configPie = <%= raw results[:pie].to_json -%>;
	var configVerbatim = <%= raw @survey.verbatims_obj('', '', nil, false).to_json -%>;
    var strEmotionLabel = "<span>emotion: </span>";
    var strCategoryLabel = "<span>category: </span>";
    var strSearchLabel = "<span>search: </span>";

    /**
     * putting together indifferent and participants category
     */
    configPie.mn+=configPie.mp;
    configPie.mp=0;

    jQuery(function ($) {
        renderBarChart(configBars);
		renderPieChart(configPie);
        loadComments(configVerbatim);


		$('#btnCommentFilter').click(filterVerbatim);
        $('#btnCommentClearFilter').click(function (){
            $('#txtCommentFilter').val('');
            filterVerbatim();
        });

        $('#see_all_comments').click(function (){
            $('#txtCommentFilter').val('');
            filterVerbatim();
            $('#emotionLabel').html("COMMENTS: ALL EMOTIONS");
            document.getElementById('see_all_comments').style.visibility = 'hidden';
        });

        $('#share_button').click(function (e) {
            $('#share_scorecard_modal').modal();

            return false;
        });

        $('#download_button').click(function (e) {
            $('#download_modal').modal();
            $('#simplemodal-container').css('width', 250);
            return false;
        });
	});
    

    function renderBarChart(config){
				        var categories = [];
                        var data = [];
				        for (var key in config) {
				            var currentCfg = config[key];
				            var obj = {y: parseInt(currentCfg.value), color: colors[currentCfg.color], name: currentCfg.name}
				            data.push(obj);
                            categories.push(currentCfg.name.toUpperCase());
				        }

				        var chart = new Highcharts.Chart({
				        exporting: {enabled: false},
				        chart: {
                         borderWidth: 0,
				         renderTo: 'barChart',
				         type: 'column',
				         margin: [ 50, 50, 100, 80],
                         height: 280,
                         width: 800
				        },
				        title: {
                            text: '<%= @survey.project_name %>',
                            x: -200,
                            style: {fontSize: '21px'}

                        },
				        xAxis: {
				         categories: categories,
				         labels: {
				            rotation: -90,
				            align: 'right',
				            style: {font: 'normal 11px Verdana, sans-serif'}
				         }
				        },
				        yAxis: {
                         labels: {enabled: false},
				         min: 0,
                         gridLineColor: '',
				         title: {text: '' }
				        },

				        plotOptions: {
				             column: {
				                cursor: 'pointer',
				                point: {
				                   events: {
				                      click: function() {
                                         var cfg = this.config;
                                         $('#emotionLabel').html(strEmotionLabel + cfg.name);
                                         document.getElementById('see_all_comments').style.visibility = 'visible';
				                         doAjax({
				                             data: {name: cfg.name},
                                             url: '/survey_results/verbatims.json',
				                             successCallback: function (response, textStatus) {
				                             var data = jQuery.parseJSON(response);
				                             loadComments(data);
				                          },
				                             errorCallback: function(request, textStatus, errorThrown){
				                              console.log(errorThrown);
                                              throw new Error('error fetching verbatims for a pointer');
				                          }
				                         });
				                      }
				                   }
				                }
				             }
				        },
				        legend: {enabled: false},
				        tooltip: {
				         formatter: function() { return '';}
				        },
				        series: [{
                            pointWidth: 30,
				            name: '',
				            data: data,
				            dataLabels: {
				               enabled: true,
				               color: '#696969',
				               align: 'right',
				               x: -10,
				               y: -10,
				               formatter: function() {
				                   return this.y;
				                },
				               style: {font: 'normal 11px Verdana, sans-serif'}
				             }
				            }]
				        });
				    }

	function renderPieChart(pieConfig){
				        var pieData = [];

				        var intTotalResponsesCount = 0;
				        for (var key in pieConfig){
				            var val = pieConfig[key];
				            var obj = {name: intensity[key], y: parseInt(val), color: pieColors[key]};
				            intTotalResponsesCount+= parseInt(val);
				            if (obj.name) pieData.push(obj);
				        }
                        
				        var pieChart = new Highcharts.Chart({
				              exporting: {enabled: false},
				              chart: {
				                 renderTo: 'pieChart',
				                 plotBackgroundColor: null,
				                 plotBorderWidth: null,
				                 plotShadow: false
				              },
                              legend: {layout: 'vertical'},
				              title: {text: ''},
				              tooltip: {
				                 formatter: function() {
				                    var pct = this.y/intTotalResponsesCount * 100;
				                    return '<b>'+ this.point.name +'</b>: '+ this.y +' responses (' + pct.toFixed(2) + '%)';

				                 }
				              },
				              plotOptions: {
				                 pie: {
                                    size: 180,
				                    allowPointSelect: true,
				                    cursor: 'pointer',
				                    dataLabels: {enabled: false},
				                    showInLegend: true,
				                    point: {
				                       events: {
				                          click: function() {
				                             $('#emotionLabel').html(strCategoryLabel + this.config.name);
                                             document.getElementById('see_all_comments').style.visibility = 'visible';
                                             doAjax({
                                                 url: '/survey_results/verbatims.json',
				                                 data: {subset: this.config.name},
				                                 successCallback: function (response, textStatus) {
				                                  var data = jQuery.parseJSON(response);
				                                  loadComments(data);
				                               },
				                               errorCallback: function(request, textStatus, errorThrown){
				                                  throw new Error('error fetching verbatims for a pie');
				                                  console.log(errorThrown);
				                               }
				                             });
				                          }
				                       }
				                    }
				                 }
				              },
				               series: [{
				                 type: 'pie',
				                 name: 'Barometer',
				                 data: pieData
				              }]
				           });
                        var strTotal = "<table><tr><td style='font-size:32px; font-weight: bold;'>";
                        strTotal += intTotalResponsesCount+"</td><td> TOTAL <br/>RESPONSES</td></tr></table>";
				        //$('#totalResp').html("Total Responses: " + intTotalResponsesCount);
                        $('#totalResp').html(strTotal);
				    }

    function loadComments(config){
        var verbatimHTML = "<table style='width: 1103px;'>\n";
        var i=0;
        var tr = '';
        for (var key in config){
            var row = config[key];
            var remainder = i % 2;

            var strEvents = " onmouseover='showRowButtons("+row.id+")' onmouseout='hideRowButtons("+row.id+")'";
            if (remainder == 1) tr = "\n<tr "+strEvents+" class='commentRow1'>\n";
            else tr = "\n<tr " +strEvents+ " class='commentRow2'>\n";


            var strEmoteTitle = row.face.split('_')[0];
            var strImgSrc = (row.email_used) ? " src='/images/clicked_email.png' " : " src='/images/unclicked_email.png' ";

            var strEmail = row.email || '';
            verbatimHTML+= tr + "\n<td align='left' style='vertical-align:middle;'>\n" +
                "&nbsp;&nbsp;<img width='20px' height='20px' " +
                " title='" + strEmoteTitle + "'" +
                " src='/images/verbatim_intensity/" +
                row.face + ".png'>&nbsp;&nbsp;  \n" + row.text + "\n</td>\n"+
                "\n<td align='right' style='vertical-align:middle;color:#5b5b5b;'>\n" +
                row.timestamp + "&nbsp;" +
                "\n<a style='width:27px; visibility:hidden;' id='btn_del_"+row.id+"' onclick='deleteVerbatim("+row.id+");'>" +
                "<img style='vertical-align:middle;' src='/images/delete_verbatim.png' width='15px' height='16px'></a> \n";
            /**
             * hide email button if no email is provided
             */
                verbatimHTML+=(strEmail) ? "\n<a href='mailto:"+strEmail+"' onclick='mailDialog("+row.id+");' style='width:27px;' " +
                " id='btn_email_"+row.id+"' >" +

                "<img style='vertical-align:middle;' width='15px' height='16px' " + strImgSrc +
                " id='img_email_"+row.id+"'></a> \n" : "";

                verbatimHTML+="\n&nbsp;<td/>\n</tr>\n";
            i++;
        }
        verbatimHTML+= '\n</table>\n';
        $('#verbatimText').html(verbatimHTML);
    }

    function showRowButtons(id){
        document.getElementById('btn_del_' + id).style.visibility = 'visible';
    }

    function hideRowButtons(id){
        document.getElementById('btn_del_' + id).style.visibility = 'hidden';
    }

    function mailDialog(id){
        doAjax({
                 data: {id: id},
                 url: '/survey_results/mark_email_as_used.json',
                 successCallback: function (response, textStatus) {
                     document.getElementById('img_email_' + id).src = '/images/clicked_email.png';
               },
                 errorCallback: function(request, textStatus, errorThrown){
                  console.log(errorThrown);
                  throw new Error('error deleting a verbatim: ' + id);
               }
             });

    }

    function deleteVerbatim(id){
        var ok = confirm("Are you sure you want to delete this response? After you delete it there's no way to undo it.");
        if (ok){
             doAjax({
                 data: {id: id},
                 url: '/survey_results/delete_response.json',
                 successCallback: function (response, textStatus) {
                    $('#txtCommentFilter').val('');
                    filterVerbatim();
               },
                 errorCallback: function(request, textStatus, errorThrown){
                  console.log(errorThrown);
                  throw new Error('error deleting a verbatim: ' + id);
               }
             });
        }
    }

    function filterVerbatim(text){
        document.getElementById('see_all_comments').style.visibility = 'visible';
        doAjax({
             url: '/survey_results/verbatims.json',
             data: {filter: $('#txtCommentFilter').val()},
             successCallback: function (response, textStatus) {
             var data = jQuery.parseJSON(response);
             loadComments(data);
           },
             errorCallback: function(request, textStatus, errorThrown){
              console.log(errorThrown);
               throw new Error('error filtering verbatims');
           }
         });
    }

    function changeImg(id, img){
        document.getElementById(id).src = '/images/' + img + '.png';
    }
   /**
     *
     * @param config.data - data to be sent to server
     * @param config.successCallback - function to call on success
     * @param config.errorCallback - function to call on failure
     */
    function doAjax(config){
       var strAjaxUrl = '/survey_results/verbatims.json';

       if (!config.data) config.data = {};
       config.data.survey = '<%= @survey.code -%>';
       config.data.action_token = '';
       config.data.session = '';
       $.ajax({
           type: "GET",
           url: config.url || strAjaxUrl,
           dataType: "html",
           data: config.data,
           cache: false,
           success: config.successCallback ,
           error: config.errorCallback
        });
    }


</script>


         <div class="scorecard_data">
            <!-- 3. Add the container -->
            <div id="barChart" class="spectrum"></div>
            <div id="share_buttons" class="share_buttons">
                <a style="cursor: pointer;">
                      <img id='share_button' onmouseout="changeImg('share_button', 'share_button');" onmouseover="changeImg('share_button', 'share_button_over');" src="/images/share_button.png" alt=""/>
                  </a>
                  <a style="cursor: pointer;">
                      <img id='download_button' onmouseout="changeImg('download_button', 'download_button');" onmouseover="changeImg('download_button', 'download_button_over');" src="/images/download_button.png" alt=""/>
                  </a>
            </div>
            <div id="totalResp" class="t-responses"></div>
            <div id="pieChart" class="barometer"></div>

            <div class="comments_data">
             
               <table>
                 <tr>
                   <td class="left_r-corners"></td>    
                   <td class="center-emotion">
                     <div id='emotionLabel'> COMMENTS: ALL EMOTIONS </div>
                   </td>
                   <td class="right_r-corners"></td>
                   <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
                   <td><a style="cursor: pointer;visibility: hidden;" id='see_all_comments'>See all comments</a></td>
                 </tr>
               </table>


             <input class="magnifying_glass" type="image" src="/images/magnifying_glass_icon.png" id="btnCommentFilter" />
             <input class="filter" type="text" id="txtCommentFilter" size="35" />
             <input class="clear-filter" type="image" src="/images/clear_comments_button.png" id="btnCommentClearFilter" />
            </div>
            
            <div class="table_comments" id="verbatimText"></div>
            <div class="clear"></div>
         </div>


    </div>
    <div id='share_scorecard_modal'>
	    <strong style="margin-left: 100px;color: #000000;">Share Scorecard Link</strong>
        <br/><br/><br/><br/>
        <span class="share_link_scorecard" style="margin-left: 60px;">
            <%= text_field_tag '', public_scorecard_url(:code => @survey.scorecard_code), :size => '30',:class => 'locked-selectall' %>
        </span>
    </div>

    <div id='download_modal' style="">
	    <strong style="margin-left: 10px;color: #000000;">Select a format to download</strong>
        <br/><br/>
        <%= link_to image_tag('excel_icon.png'), scorecard_account_survey_path(@survey, :format => :xls) %>
    </div>

</div>